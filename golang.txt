golang环境变量配置：
GOPATH: D:\Code\golang --在此文件夹下的src文件夹存储项目代码
GOPRIVATE: git.mycompany.com,github.com/my/private
GOPROXY: https://goproxy.io,direct
GOROOT: D:\Go_Programming_language\go1_24 --指定go安装路径

VScode打开设置(ctrl + ',') 搜索GO:GOPATH在setting.json文件中配置对应参数
将在这个参数对应的文件下下载dlv,gopls等工具以及用到的包，默认情况下这个参数
在c盘的用户目录下，很占空间

查看证书
openssl x509 -in /etc/ssl/certs/mycert.crt -text -noout

将本地已经存在的项目上传到云端 Git 仓库（如 GitHub、GitLab 等）可以按照以下步骤进行操作：

### 1. **初始化本地 Git 仓库（如果尚未初始化）**
如果你的本地项目还没有初始化 Git 仓库，首先在项目文件夹内执行以下命令来初始化 Git 仓库：

```sh
git init
```

### 2. **添加文件并提交**
接下来，添加所有文件并进行第一次提交：

```sh
git add .
git commit -m "Initial commit"
```

### 3. **创建远程仓库**
在 GitHub、GitLab 或其他 Git 托管平台创建一个新的空仓库。例如，如果你使用 GitHub：

- 访问 [GitHub](https://github.com/)
- 点击右上角的 `+` 按钮，选择 `New repository`
- 输入仓库名称，选择是否公开或私有，创建仓库

创建后，你会看到类似以下内容的页面，其中包含将本地仓库关联到远程仓库的命令：

```sh
https://github.com/username/repository.git
```

### 4. **将远程仓库添加为远程源**
将远程仓库的 URL 添加为远程源，替换以下命令中的 `https://github.com/username/repository.git` 为你实际的远程仓库地址：

```sh
git remote add origin https://github.com/username/repository.git
```

### 5. **推送本地项目到远程仓库**
推送本地的 `main` 分支（或者你使用的分支）到远程仓库：

```sh
git push -u origin main
```

如果远程仓库的默认分支是 `master`，你需要改为：
```sh
git push -u origin master
```

### 6. **确认上传成功**
上传后，你可以访问远程仓库（比如 GitHub）查看项目文件是否已经成功上传。

---

### 完整步骤总结：
1. `git init`：初始化本地 Git 仓库（如果未初始化）。
2. `git add .`：将所有文件添加到 Git 暂存区。
3. `git commit -m "Initial commit"`：提交更改。
4. `git remote add origin <远程仓库 URL>`：添加远程仓库。
5. `git push -u origin main`：推送到远程仓库。

这样，你的本地项目就会成功上传到云端 Git 仓库。如果有任何问题，随时向我咨询！
